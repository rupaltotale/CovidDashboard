{"version":3,"sources":["Pages/Home.tsx","Theme.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","home","textAlign","width","margin","chart","height","leaflet","Markers","markers","map","loc","Marker","position","LatLng","key","toString","Popup","getTotalDeathsByState","data","slice","row","isNaN","parseInt","Deaths_Total","state","State","total","sort","a","b","getTotalCasesForEthnicity","ethnicity","Cases_Total","HomePage","useState","fetchedCSVData","setFetchedCSVdata","csv","process","then","res","classes","className","Typography","variant","VictoryTheme","material","domainPadding","containerComponent","labels","datum","xName","_y","x","y","text","horizontal","offset","colorScale","Map","center","zoom","style","TileLayer","url","attribution","Theme","children","createMuiTheme","palette","ThemeProvider","Routes","props","path","Home","App","CssBaseline","Boolean","window","location","hostname","match","persistConfig","storage","stateReconciler","autoMergeLevel2","rootReducer","combineReducers","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.083dbed6.chunk.js","sourcesContent":["//React Imports\nimport React, { useEffect, useState } from 'react';\nimport {\n  VictoryBar,\n  VictoryChart,\n  VictoryAxis,\n  VictoryGroup,\n  VictoryTheme,\n  VictoryStack,\n  VictoryLine,\n  VictoryLabel,\n  VictoryZoomContainer,\n  VictoryVoronoiContainer,\n  VictoryLegend,\n} from 'victory';\nimport { csv, DSVRowArray } from 'd3';\n\n//Material UI Imports\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\nimport { LatLng } from 'leaflet';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  home: {\n    textAlign: 'center',\n    width: '80%',\n    margin: 'auto',\n  },\n  chart: {\n    height: '750px',\n  },\n  leaflet: {\n    height: '400px',\n    width: '100%',\n    margin: '10px',\n  },\n}));\nconst Markers: React.FC = () => {\n  const locations = [\n    [34.155834, -119.202789],\n    [42.933334, -76.566666],\n    [42.095554, -79.238609],\n    [38.846668, -91.948059],\n  ];\n  const markers = locations.map((loc: number[]) => {\n    return (\n      <Marker position={new LatLng(loc[0], loc[1])} key={loc.toString()}>\n        <Popup>Major city in the US</Popup>\n      </Marker>\n    );\n  });\n  return <div>{markers}</div>;\n};\nconst getTotalDeathsByState = (data: any) => {\n  const newData = data\n    .slice(0, 51)\n    .map((row: any) => {\n      if (!isNaN(parseInt(row.Deaths_Total))) {\n        return { state: row.State, total: parseInt(row.Deaths_Total) / 1000 };\n      }\n      return { state: row.State, total: 0 };\n    })\n    .sort((a: any, b: any) => b.total - a.total)\n    .slice(0, 10);\n  return newData;\n};\nconst getTotalCasesPerState = (data: any) => {\n  const newData = data\n    .slice(0, 51)\n    .map((row: any) => {\n      if (!isNaN(parseInt(row.Cases_Total))) {\n        return { state: row.State, total: parseInt(row.Cases_Total) / 1000 };\n      }\n      return { state: row.State, total: 0 };\n    })\n    .sort((a: any, b: any) => b.total - a.total)\n    .slice(0, 10);\n  return newData;\n};\n\nconst getTotalCasesForEthnicity = (data: any, ethnicity: any) => {\n  const newData = data\n    .slice(0, 51)\n    .sort((a: any, b: any) => b.Cases_Total - a.Cases_Total)\n    .slice(0, 10)\n    .map((row: any) => {\n      if (!isNaN(parseInt(row[`Cases_${ethnicity}`]))) {\n        return {\n          state: row.State,\n          total: parseInt(row[`Cases_${ethnicity}`]) / 1000,\n        };\n      }\n      return { state: row.State, total: 0 };\n    });\n  return newData;\n};\ntype CSVData = DSVRowArray | null;\nconst HomePage: React.FC = () => {\n  const initialState: CSVData = null;\n  const [fetchedCSVData, setFetchedCSVdata] = useState<CSVData>(initialState);\n  if (fetchedCSVData == null) {\n    csv(`${process.env.PUBLIC_URL}/covid-data.csv`).then((res) => {\n      setFetchedCSVdata(res);\n    });\n  }\n  const classes = useStyles();\n  const position: LatLng = new LatLng(51.505, -0.09);\n\n  return (\n    <div className={classes.home}>\n      <Typography variant='h3'>COVID Dashboard</Typography>\n      <div className={classes.chart}>\n        <VictoryChart\n          theme={VictoryTheme.material}\n          domainPadding={10}\n          containerComponent={\n            <VictoryVoronoiContainer\n              labels={({ datum }) => {\n                return `${datum.xName}, ${datum._y}`;\n              }}\n            />\n          }\n        >\n          <VictoryLabel\n            x={25}\n            y={24}\n            text='Number of total cases for top ten states (x 1000)'\n          />\n          {fetchedCSVData && (\n            <VictoryBar\n              horizontal\n              data={getTotalCasesPerState(fetchedCSVData)}\n              x='state'\n              y='total'\n            ></VictoryBar>\n          )}\n        </VictoryChart>\n      </div>\n      <div className={classes.chart}>\n        <VictoryChart\n          domainPadding={20}\n          theme={VictoryTheme.material}\n          containerComponent={<VictoryZoomContainer />}\n        >\n          <VictoryLabel\n            x={25}\n            y={24}\n            text='Breakdown of total cases by race for top ten states (x 1000)'\n          />\n          {fetchedCSVData && (\n            <VictoryGroup\n              offset={5}\n              colorScale={'qualitative'}\n              theme={VictoryTheme.material}\n              horizontal\n            >\n              <VictoryBar\n                data={getTotalCasesForEthnicity(fetchedCSVData, 'White')}\n                x='state'\n                y='total'\n              />\n              <VictoryBar\n                data={getTotalCasesForEthnicity(fetchedCSVData, 'Black')}\n                x='state'\n                y='total'\n              />\n              <VictoryBar\n                data={getTotalCasesForEthnicity(fetchedCSVData, 'Asian')}\n                x='state'\n                y='total'\n              />\n              <VictoryBar\n                data={getTotalCasesForEthnicity(fetchedCSVData, 'AIAN')}\n                x='state'\n                y='total'\n              />\n            </VictoryGroup>\n          )}\n        </VictoryChart>\n      </div>\n      <div className={classes.chart}>\n        <VictoryChart\n          theme={VictoryTheme.material}\n          domainPadding={10}\n          containerComponent={\n            <VictoryVoronoiContainer\n              labels={({ datum }) => {\n                return `${datum.xName}, ${datum._y}`;\n              }}\n            />\n          }\n        >\n          <VictoryLabel\n            x={25}\n            y={24}\n            text='Number of total deaths for top ten states (x 1000)'\n          />\n          {fetchedCSVData && (\n            <VictoryBar\n              horizontal\n              data={getTotalDeathsByState(fetchedCSVData)}\n              x='state'\n              y='total'\n            ></VictoryBar>\n          )}\n        </VictoryChart>\n      </div>\n      <VictoryChart>\n        <VictoryLine\n          data={[\n            { x: 1, y: 2 },\n            { x: 2, y: 3 },\n            { x: 3, y: 5 },\n            { x: 4, y: 4 },\n            { x: 5, y: 6 },\n          ]}\n        />\n      </VictoryChart>\n      <div className={classes.leaflet}>\n        <Map center={position} zoom={2} style={{ height: '100%' }}>\n          <TileLayer\n            url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          <Markers />\n        </Map>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","//React Imports\nimport React from \"react\";\n\n//Material UI Imports\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst Theme: React.FC = ({ children }) => {\n  const theme = createMuiTheme({\n    palette: {},\n  });\n\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n};\n\nexport default Theme;\n","//React Imports\nimport React from 'react';\nimport Home from './Pages/Home';\n\n//Material UI Imports\nimport Theme from './Theme';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n//Router Imports\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst App: React.FC = (props) => {\n  return (\n    <Theme>\n      <CssBaseline />\n      <Routes />\n    </Theme>\n  );\n};\n\nconst Routes: React.FC = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/'>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\n//Hot Loader reloads the app when you save changes\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//Redux Imports\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\n\n//Redux Persist Imports\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\n\n//Redux Thunk Imports\nimport thunk from \"redux-thunk\";\n\n//Redux Devtools Imports\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n//The reducers that are imported from the reducers folder will be added to this object\nconst reducers = {};\n\n//The configuration for the persisted reducer\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  stateReconciler: autoMergeLevel2,\n};\n\nconst rootReducer = combineReducers(reducers);\n//@ts-ignore\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const configureStore = () =>\n  //Creating the store with the persisted reducer, redux devtools, and redux thunk\n  createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)));\n","//React Imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux Imports\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store';\n\n//Redux Persist Imports\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\nconst store = configureStore();\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={<div>Loading...</div>} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}